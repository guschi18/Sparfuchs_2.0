/**
 * PUNKT 5 TEST: Kontext-Generierung f√ºr AI
 * Test f√ºr System-Context (Intent-bewusst) + Produkt-Context Generation
 */

// Mock-Produktdaten basierend auf Punkt 4 Ergebnissen
const MOCK_BUTTER_PRODUCTS = [
  { id: 'p1', productName: 'Landliebe Butter', category: 'Lebensmittel', subCategory: 'Milchprodukte (Butter)', supermarket: 'Lidl', price: 2.29, startDate: '2025-08-05', endDate: '2025-08-11' },
  { id: 'p2', productName: 'Kerrygold extra', category: 'Lebensmittel', subCategory: 'Butter/Margarine', supermarket: 'Lidl', price: 3.33, startDate: '2025-08-05', endDate: '2025-08-11' },
  { id: 'p3', productName: 'L√§tta Original', category: 'Lebensmittel', subCategory: 'Margarine', supermarket: 'Lidl', price: 0.99, startDate: '2025-08-05', endDate: '2025-08-11' },
  { id: 'p4', productName: 'FRAU ANTJE Butter', category: 'Lebensmittel', subCategory: 'Milchprodukte (Butter)', supermarket: 'Aldi', price: 1.89, startDate: '2025-08-05', endDate: '2025-08-12' },
  { id: 'p5', productName: 'RAMA Original 100% pflanzlich', category: 'Lebensmittel', subCategory: 'Margarine', supermarket: 'Aldi', price: 1.29, startDate: '2025-08-05', endDate: '2025-08-12' },
  { id: 'p6', productName: 'Rama Streichfett', category: 'Lebensmittel', subCategory: 'Butter/Margarine', supermarket: 'Edeka', price: 1.19, startDate: '2025-08-05', endDate: '2025-08-10' }
];

const BUTTER_INTENT = {
  primaryIntent: "butter",
  includeCategories: ["Milchprodukte (Butter)", "Butter/Margarine", "Milchprodukte/Butter", "Butter & Margarine"],
  excludeCategories: ["Backwaren", "Geb√§ck", "S√º√üwaren", "Kekse", "Buttergeb√§ck", "Desserts"],
  keywords: ["streichfett", "margarine", "butterfett", "kr√§uterbutter"],
  confidence: 0.4444444444444444
};

// Schritt 5.1: System-Context (Intent-bewusst) generieren
function generateIntentAwareSystemContext(config, intent) {
  console.log('üéØ SCHRITT 5.1: SYSTEM-CONTEXT (INTENT-BEWUSST)');
  console.log('===============================================');
  
  const marketList = config.selectedMarkets.join(', ');
  
  // Basis System-Context
  const baseSystemMessage = `Du bist SparFuchs, ein KI-Assistent f√ºr deutsche Supermarkt-Angebote.

Du hilfst bei der Suche nach Supermarkt-Angeboten und Produkten.

Verf√ºgbare M√§rkte: ${marketList}

WICHTIGE REGELN:
1. Antworte nur auf Deutsch
2. Erw√§hne nur Produkte, die in den Daten verf√ºgbar sind
3. Gib konkrete Preise und M√§rkte an
4. Sei hilfsbereit und freundlich
5. Bietet nur Alternativen an, wenn es keine passenden Produkte gibt
6. Formatiere Preise als "X,XX ‚Ç¨"
7. Erw√§hne bei Produkten immer den Markt und Zeitraum
8. KRITISCH: Gib Produkte IMMER in dieser exakten Markt-Reihenfolge aus: Lidl, Aldi, Edeka, Penny, Rewe
9. NIEMALS eine andere Markt-Reihenfolge verwenden! Diese Reihenfolge ist ZWINGEND einzuhalten!

SPEZIELLE FORMATIERUNG:
10. Wenn du Produktinformationen in deiner Antwort erw√§hnst, verwende IMMER das spezielle PRODUCT_CARD Format
11. F√ºr jedes Produkt das du erw√§hnst, f√ºge diese Zeile in deine Antwort ein:
    PRODUCT_CARD: {"name": "Produktname", "price": "X,XX", "market": "Marktname", "dateRange": "von bis", "id": "product_id"}
12. Verwende normale Text-Erkl√§rungen UND die PRODUCT_CARD-Zeilen zusammen
13. Beispiel-Antwort: "Hier sind g√ºnstige Milchprodukte:\\n\\nPRODUCT_CARD: {"name": "M√ºller M√ºllermilch", "price": "0,69", "market": "Lidl", "dateRange": "2025-05-05 bis 2025-05-10", "id": "product_1"}\\n\\nDieses Angebot ist besonders g√ºnstig..."

Du hast Zugang zu aktuellen Angebotsdaten von deutschen Superm√§rkten.`;
  
  if (!intent) {
    console.log('‚ùå Kein Intent - Basis System-Context verwendet');
    return baseSystemMessage;
  }

  // Intent-spezifische Anweisungen generieren
  const intentInstructions = generateIntentSpecificInstructions(intent);
  
  const intentAwareSystemMessage = `${baseSystemMessage}

üéØ SPEZIELLE INTENT-ANWEISUNGEN f√ºr "${intent.primaryIntent}":
${intentInstructions}

KRITISCH: Diese Intent-Anweisungen haben H√ñCHSTE PRIORIT√ÑT und √ºberschreiben allgemeine Regeln!`;

  console.log('‚úÖ Intent-bewusster System-Context generiert');
  console.log(`üéØ Intent: "${intent.primaryIntent}" (${(intent.confidence * 100).toFixed(1)}% Confidence)`);
  console.log(`üìù Spezielle Anweisungen: ${intentInstructions.split('\n').length} Zeilen`);
  
  return intentAwareSystemMessage;
}

// Intent-spezifische Anweisungen
function generateIntentSpecificInstructions(intent) {
  const intentInstructions = {
    'butter': `
üßà BUTTER-SUCHE ERKANNT:
- ‚úÖ SUCHE NUR nach: Streichfett, Margarine, echter Butter zum Streichen
- ‚ùå NIEMALS erw√§hnen: Buttergeb√§ck, Kekse, Backwaren, s√º√üe Produkte
- ‚ùå ABSOLUTES VERBOT: "BISCOTTO D√§nisches Buttergeb√§ck" oder √§hnliche Backwaren
- ‚úÖ BEVORZUGE: Produkte mit "Butter" im Namen aus Milchprodukte-Kategorien
- üéØ PRIORIT√ÑT: Streichf√§hige Butter-Produkte f√ºr Brot/Kochen`,

    'milch': `
ü•õ MILCH-SUCHE ERKANNT:
- ‚úÖ SUCHE NUR nach: Trinkmilch, Vollmilch, Frischmilch, Landmilch zum Trinken
- ‚ùå NIEMALS erw√§hnen: Joghurt, Quark, Desserts, Buttermilch-Drinks, Almighurt
- ‚ùå ABSOLUTES VERBOT: Joghurt-Produkte als Milch-Alternative
- ‚úÖ BEVORZUGE: Reine Milch-Produkte in Flaschen/Kartons
- üéØ PRIORIT√ÑT: Milch zum Trinken, nicht f√ºr Desserts`
  };

  return intentInstructions[intent.primaryIntent] || `
üéØ INTENT "${intent.primaryIntent}" ERKANNT:
- ‚úÖ FOKUS auf Kategorien: ${intent.includeCategories.join(', ')}
- ‚ùå NIEMALS Produkte aus: ${intent.excludeCategories.join(', ')}
- üéØ PRIORIT√ÑT: Produkte die genau zum Intent passen`;
}

// Schritt 5.2: Produkt-Context generieren
function generateProductContext(products, query) {
  console.log('\nüéØ SCHRITT 5.2: PRODUKT-CONTEXT');
  console.log('==================================');
  
  console.log(`üìù Query: "${query}"`);
  console.log(`üìä Products: ${products.length}`);
  
  if (products.length === 0) {
    const emptyContext = 'Keine passenden Produkte in den aktuellen Angeboten gefunden.';
    console.log('‚ùå Keine Produkte - Empty Context generiert');
    return emptyContext;
  }

  // Produkte nach Markt-Reihenfolge sortieren
  const marketOrder = ['Lidl', 'Aldi', 'Edeka', 'Penny', 'Rewe'];
  const sortedProducts = products.sort((a, b) => {
    const indexA = marketOrder.indexOf(a.supermarket);
    const indexB = marketOrder.indexOf(b.supermarket);
    
    const finalIndexA = indexA === -1 ? 999 : indexA;
    const finalIndexB = indexB === -1 ? 999 : indexB;
    
    return finalIndexA - finalIndexB;
  });

  console.log('üè™ Produkte nach Markt-Reihenfolge sortiert:');
  sortedProducts.forEach((product, index) => {
    console.log(`   ${index + 1}. ${product.productName} - ${product.supermarket} (${product.price.toFixed(2)}‚Ç¨)`);
  });

  // PRODUCT_CARD Format generieren
  const productContext = sortedProducts
    .map((product) => {
      const productCard = {
        name: product.productName,
        price: product.price.toFixed(2).replace('.', ','),
        market: product.supermarket,
        dateRange: `${formatDate(product.startDate)} bis ${formatDate(product.endDate)}`,
        id: product.id
      };
      return `PRODUCT_CARD: ${JSON.stringify(productCard)}`;
    })
    .join('\n');

  const contextMessage = `Aktuelle Angebote f√ºr "${query}" (${products.length} von ${products.length} Produkten gefunden):

WICHTIG: Die Produkte sind bereits in der korrekten Markt-Reihenfolge sortiert (Lidl, Aldi, Edeka, Penny, Rewe). BITTE DIESE REIHENFOLGE IN DEINER ANTWORT BEIBEHALTEN!

VERWENDE F√úR JEDES PRODUKT DAS PRODUCT_CARD FORMAT IN DEINER ANTWORT:

${productContext}`;

  console.log('‚úÖ Produkt-Context erfolgreich generiert');
  console.log(`üìã ${sortedProducts.length} PRODUCT_CARD Eintr√§ge erstellt`);
  
  return contextMessage;
}

// Hilfsfunktion f√ºr Datumsformatierung
function formatDate(dateString) {
  const date = new Date(dateString);
  return date.toLocaleDateString('de-DE', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric'
  });
}

// Schritt 5.3: Vollst√§ndige Context-Generierung
function generateFullContext(userQuery, config, intent, products) {
  console.log('\nüéØ SCHRITT 5.3: VOLLST√ÑNDIGE CONTEXT-GENERIERUNG');
  console.log('=================================================');
  
  console.log(`üìù User Query: "${userQuery}"`);
  console.log(`‚öôÔ∏è Config: ${JSON.stringify(config)}`);
  console.log(`üéØ Intent: ${intent ? intent.primaryIntent : 'None'}`);
  console.log(`üìä Products: ${products.length}`);
  
  // System-Context generieren
  const systemMessage = generateIntentAwareSystemContext(config, intent);
  
  // Produkt-Context generieren 
  const contextMessage = generateProductContext(products, userQuery);
  
  console.log('\nüìã CONTEXT GENERATION SUMMARY:');
  console.log(`   System Message: ${systemMessage.length} Zeichen`);
  console.log(`   Context Message: ${contextMessage.length} Zeichen`);
  console.log(`   Total Context: ${systemMessage.length + contextMessage.length} Zeichen`);
  
  return {
    systemMessage,
    contextMessage
  };
}

// TEST AUSF√úHRUNG
function testContextGeneration() {
  console.log('üß™ PUNKT 5: KONTEXT-GENERIERUNG TEST - START');
  console.log('=============================================\n');
  
  const userQuery = "Wo ist Butter im Angebot";
  const config = {
    selectedMarkets: ['Lidl', 'Aldi', 'Edeka', 'Penny', 'Rewe'],
    maxProducts: 50
  };
  
  // Vollst√§ndige Context-Generierung testen
  const contextResult = generateFullContext(userQuery, config, BUTTER_INTENT, MOCK_BUTTER_PRODUCTS);
  
  console.log('\nüéØ CONTEXT GENERATION RESULTS:');
  console.log('===============================');
  
  console.log('\nüìÑ SYSTEM MESSAGE (First 500 chars):');
  console.log('-------------------------------------');
  console.log(contextResult.systemMessage.substring(0, 500) + '...');
  
  console.log('\nüìã CONTEXT MESSAGE (Full):');
  console.log('---------------------------');
  console.log(contextResult.contextMessage);
  
  // Qualit√§tspr√ºfung
  console.log('\nüîç QUALIT√ÑTSPR√úFUNG:');
  console.log('====================');
  
  const checks = {
    systemMessageNotEmpty: contextResult.systemMessage.length > 0,
    contextMessageNotEmpty: contextResult.contextMessage.length > 0,
    containsIntentInstructions: contextResult.systemMessage.includes('BUTTER-SUCHE ERKANNT'),
    containsProductCards: contextResult.contextMessage.includes('PRODUCT_CARD:'),
    containsMarketOrder: contextResult.contextMessage.includes('Lidl, Aldi, Edeka, Penny, Rewe'),
    productCountCorrect: (contextResult.contextMessage.match(/PRODUCT_CARD:/g) || []).length === MOCK_BUTTER_PRODUCTS.length
  };
  
  Object.entries(checks).forEach(([check, passed]) => {
    console.log(`   ${passed ? '‚úÖ' : '‚ùå'} ${check}: ${passed ? 'PASS' : 'FAIL'}`);
  });
  
  const allPassed = Object.values(checks).every(check => check);
  
  console.log('\nüìä PUNKT 5 ZUSAMMENFASSUNG:');
  console.log('============================');
  if (allPassed) {
    console.log('‚úÖ Kontext-Generierung funktioniert korrekt');
    console.log('‚úÖ Intent-bewusste System-Prompts werden generiert');
    console.log('‚úÖ Produkt-Context mit PRODUCT_CARD Format');
    console.log('‚úÖ Markt-Reihenfolge wird eingehalten');
    console.log('‚úÖ Alle Qualit√§tspr√ºfungen bestanden');
    console.log('\n‚û°Ô∏è BEREIT F√úR PUNKT 6: OpenRouter API Test');
    
    console.log('\nüìã Daten f√ºr OpenRouter (Point 6):');
    console.log(`System Message Length: ${contextResult.systemMessage.length} chars`);
    console.log(`Context Message Length: ${contextResult.contextMessage.length} chars`);
    console.log(`Total Tokens (ca.): ${Math.ceil((contextResult.systemMessage.length + contextResult.contextMessage.length) / 4)} tokens`);
  } else {
    console.log('‚ùå FEHLER: Kontext-Generierung hat Probleme');
    console.log('‚ùå Qualit√§tspr√ºfungen fehlgeschlagen - System muss repariert werden');
  }
  
  return {
    success: allPassed,
    systemMessage: contextResult.systemMessage,
    contextMessage: contextResult.contextMessage,
    checks
  };
}

// TEST AUSF√úHRUNG
const result = testContextGeneration();